package com.example.covid;

import android.graphics.Color;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.example.covid.database.CountryTotalDaily;
import com.example.covid.database.CountryTotalDailyList;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.listener.LineChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;


public class WorldFragment extends Fragment {

    private static final String TAG = "WorldFragment";
    // Data source updates daily, we display yesterday's data
    private String date;
    // A start date that the data statistic begins
    LocalDate startDate = LocalDate.of(2020, 1, 22);
    private ArrayList<String> dateList = new ArrayList<>();

    // Connect to country database
    final FirebaseDatabase countryDB = FirebaseDatabase.getInstance("https://covid-country.firebaseio.com/");
    private DatabaseReference worldDBRef;

    // CountryTotalDaily object to load data of certain country on certain date
    // countryTotalDailyArray list to store CountryTotalDaily object of certain country on all date
    // CountryTotalDailyList object generated by countryTotalDailyArray list
    private CountryTotalDaily countryTotalDaily;
    private CountryTotalDailyList countryTotalDailyList;
    private List<CountryTotalDaily> countryTotalDailyArray = new ArrayList<>();

    //Textview
    private TextView world_confirmed_num_text;
    private TextView world_death_num_text;
    private TextView world_recovered_num_text;
    private TextView world_current_num_text;

    //Chart
    private LineChartView mChart;
    private ArrayList<PointValue> confirmedValues = new ArrayList<>();
    private ArrayList<PointValue> deathsValues = new ArrayList<>();
    private ArrayList<PointValue> recoveredValues = new ArrayList<>();
    private ArrayList<PointValue> currentValues = new ArrayList<>();
    private Line confirmedLine;
    private Line deathsLine;
    private Line recoveredLine;
    private Line currentLine;
    private ArrayList<Line> lines = new ArrayList<>();
    private LineChartData lineData;

    public WorldFragment() {
        // Required empty public constructor
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

        // get the date of last day, since the data source updates daily, we display the data of one day before
        LocalDate curDate = LocalDate.now();
        LocalDate yesterday = curDate.minusDays(1);
        date = yesterday.format(DateTimeFormatter.ofPattern("MM-dd-yyyy"));

        //generate a list from start date to the day before today
        for (LocalDate i = startDate; !i.equals(curDate); i = i.plusDays(1)) {
            dateList.add(i.format(DateTimeFormatter.ofPattern("MM-dd-yyyy")));
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_world, container, false);

        //Init textview
        world_confirmed_num_text = view.findViewById(R.id.world_confirmed_num_text);
        world_death_num_text = view.findViewById(R.id.world_death_num_text);
        world_recovered_num_text = view.findViewById(R.id.world_recovered_num_text);
        world_current_num_text = view.findViewById(R.id.world_current_num_text);
        // Init Chart
        mChart = view.findViewById(R.id.world_chart);

        //Fetch the world data
        worldDBRef = countryDB.getReference("countries").child("World");
        ValueEventListener countryListener = new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                for (DataSnapshot ds: dataSnapshot.getChildren()) {
                    // Get the world daily data
                    countryTotalDaily = ds.getValue(CountryTotalDaily.class);
                    // Add daily data to an array
                    countryTotalDailyArray.add(countryTotalDaily);
                }
                // New a CountryTotalDailyList object
                countryTotalDailyList = new CountryTotalDailyList(countryTotalDailyArray);
                // Load chart data
                loadData();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.w(TAG, "loadPost:onCancelled", databaseError.toException());
            }
        };
        worldDBRef.addValueEventListener(countryListener);
        mChart.setOnValueTouchListener(new ValueTouchListener());
        return view;
    }

    // Listener when click points on the chart
    private class ValueTouchListener implements LineChartOnValueSelectListener {
        @Override
        public void onValueSelected(int lineIndex, int pointIndex, PointValue value) {
            // show a toast with points' data when clicked
            Toast.makeText(getActivity(), "Selected Value: " + (int)(value.getY() * 1000), Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onValueDeselected() { }
    }

    private void loadData() {
        if (countryTotalDailyList != null) {
            // Set the textviews
            new Thread() {
                @Override
                public void run() {
                    super.run();
                    final CountryTotalDaily yesterdayWorldTotal = countryTotalDailyList.getCountryTotalDailyOnDate(date);

                    // load value to each line
                    float i = 1.0f;
                    for (String d: dateList) {
                        // Set points
                        CountryTotalDaily worldTotalOnCertainDateObject = countryTotalDailyList.getCountryTotalDailyOnDate(d);
                        confirmedValues.add(new PointValue(i, worldTotalOnCertainDateObject.getConfirmed() / 1000f));
                        deathsValues.add(new PointValue(i, worldTotalOnCertainDateObject.getDeaths() / 1000f));
                        recoveredValues.add(new PointValue(i, worldTotalOnCertainDateObject.getRecovered() / 1000f));
                        currentValues.add(new PointValue(i, worldTotalOnCertainDateObject.getCurrent() / 1000f));
                        i += 1;
                    }

                    //update the UI
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            world_confirmed_num_text.setText(String.valueOf(yesterdayWorldTotal.getConfirmed()));
                            world_death_num_text.setText(String.valueOf(yesterdayWorldTotal.getRecovered()));
                            world_recovered_num_text.setText(String.valueOf(yesterdayWorldTotal.getDeaths()));
                            world_current_num_text.setText(String.valueOf(yesterdayWorldTotal.getCurrent()));

                            // Set lines
                            confirmedLine = new Line(confirmedValues);
                            confirmedLine.setColor(Color.parseColor("#f44336"));
                            confirmedLine.setPointRadius(4);

                            deathsLine = new Line(deathsValues);
                            deathsLine.setColor(Color.parseColor("#757575"));
                            deathsLine.setPointRadius(4);

                            recoveredLine = new Line(recoveredValues);
                            recoveredLine.setColor(Color.parseColor("#2E7D32"));
                            recoveredLine.setPointRadius(4);

                            currentLine = new Line(currentValues);
                            currentLine.setColor(Color.parseColor("#ff94c2"));
                            currentLine.setPointRadius(4);
                            // Add lines
                            lines.add(confirmedLine);
                            lines.add(deathsLine);
                            lines.add(recoveredLine);
                            lines.add(currentLine);

                            lineData = new LineChartData(lines);
                            // Set the axis
                            Axis axisX = new Axis();
                            Axis axisY = new Axis();
                            axisX.setName("Date");
                            axisY.setName("Count(Unit: K)");
                            axisX.setTextSize(8);
                            axisX.setHasTiltedLabels(true);
                            axisY.setTextSize(8);

                            List<AxisValue> axisValueForX = new ArrayList<>();
                            for(int i = 1; i < dateList.size(); i++) {
                                axisValueForX.add(new AxisValue(i).setLabel(dateList.get(i).substring(0, 5)));
                            }
                            axisX.setValues(axisValueForX);
                            lineData.setAxisXBottom(axisX);
                            lineData.setAxisYLeft(axisY);
                            // Set the chart
                            mChart.setZoomEnabled(true);
                            mChart.setLineChartData(lineData);
                            Log.d(TAG, "loadData: The chart is loaded");
                        }
                    });
                }
            }.start();
        } else {
            Log.d(TAG, "onStart: onStart Obejct Null");
        }
    }
}
